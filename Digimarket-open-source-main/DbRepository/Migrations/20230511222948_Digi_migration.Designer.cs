// <auto-generated />
using System;
using DbRepository.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbRepository.Migrations
{
    [DbContext(typeof(digimarket_devContext))]
    [Migration("20230511222948_Digi_migration")]
    partial class Digimigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("DbRepository.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("AdminTypeId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("admin_type_id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_id");

                    b.HasKey("AdminId");

                    b.ToTable("admin", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.ContactU", b =>
                {
                    b.Property<int>("ContactUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contact_us_id");

                    b.Property<int?>("ContactUsOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("contact_us_organization_id");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("emailAddress");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("firstName");

                    b.Property<ulong?>("IsArchived")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_archived");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("lastName");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("message");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("phone");

                    b.Property<string>("Topic")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("topic");

                    b.HasKey("ContactUsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "contact_us_created_by_idx");

                    b.HasIndex(new[] { "ContactUsOrganizationId" }, "contact_us_organization_id_idx");

                    b.ToTable("contact_us", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("CourseDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("course_description");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("course_name");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_date");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.HasKey("CourseId");

                    b.HasIndex(new[] { "CreatedBy" }, "course_created_by_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "course_organization_id_idx");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.CourseLesson", b =>
                {
                    b.Property<int>("CourseLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_lesson_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("UserContentId")
                        .HasColumnType("int")
                        .HasColumnName("user_content_id");

                    b.HasKey("CourseLessonId");

                    b.HasIndex(new[] { "CourseId" }, "course_lesson_course_id_idx");

                    b.HasIndex(new[] { "UserContentId" }, "course_lesson_user_content_id_idx");

                    b.ToTable("course_lesson", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.CourseLocation", b =>
                {
                    b.Property<int>("CourseLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_location_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_date");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("details");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.HasKey("CourseLocationId");

                    b.HasIndex(new[] { "CreatedBy" }, "course_location_created_by_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "course_location_organization_id_idx");

                    b.ToTable("course_location", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.CourseSchedule", b =>
                {
                    b.Property<int>("CourseScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("created_date");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.HasKey("CourseScheduleId");

                    b.HasIndex(new[] { "CourseId" }, "course_schedule_course_id_idx");

                    b.HasIndex(new[] { "CreatedBy" }, "course_schedule_created_by_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "course_schedule_organization_id_idx");

                    b.ToTable("course_schedule", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.CourseScheduleAttendance", b =>
                {
                    b.Property<int>("CourseScheduleAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_attendance_id");

                    b.Property<int>("CourseScheduleCourseDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_course_details_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<ulong?>("IsPresent")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_present");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CourseScheduleAttendanceId");

                    b.HasIndex(new[] { "CreatedBy" }, "course_schedule_attendance_created_by_idx");

                    b.HasIndex(new[] { "UserId" }, "course_schedule_attendance_user_id_idx");

                    b.HasIndex(new[] { "CourseScheduleCourseDetailsId" }, "course_schedule_course_details_id_idx");

                    b.ToTable("course_schedule_attendance", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.CourseScheduleCourseDetail", b =>
                {
                    b.Property<int>("CourseScheduleCourseDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_course_details_id");

                    b.Property<int>("CourseScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_id");

                    b.Property<string>("DateTime")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("date_time");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int?>("MaxParticipantsCount")
                        .HasColumnType("int")
                        .HasColumnName("max_participants_count");

                    b.Property<int?>("ParticipantNotificationThreshold")
                        .HasColumnType("int")
                        .HasColumnName("participant_notification_threshold");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.Property<int>("UserContentId")
                        .HasColumnType("int")
                        .HasColumnName("user_content_id");

                    b.HasKey("CourseScheduleCourseDetailsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseScheduleId" }, "course_schedule_course_details_course_schedule_id_idx");

                    b.HasIndex(new[] { "LocationId" }, "course_schedule_course_details_location_id_idx");

                    b.HasIndex(new[] { "TeacherId" }, "course_schedule_course_details_teacher_id_idx");

                    b.HasIndex(new[] { "UserContentId" }, "course_schedule_course_details_user_content_id_idx");

                    b.ToTable("course_schedule_course_details", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.CourseScheduleMember", b =>
                {
                    b.Property<int>("CourseScheduleMembersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_members_id");

                    b.Property<int>("CourseScheduleCourseDetails")
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_course_details");

                    b.Property<int>("MemberType")
                        .HasColumnType("int")
                        .HasColumnName("member_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CourseScheduleMembersId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseScheduleCourseDetails" }, "course_schedule_details_idx");

                    b.HasIndex(new[] { "UserId" }, "course_schedule_member_user_id_idx");

                    b.ToTable("course_schedule_members", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.OnGoingClassForUser", b =>
                {
                    b.Property<int>("OnGoingClassForUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("on_going_class_for_user_id");

                    b.Property<int>("CourseScheduleCourseDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_course_details_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OnGoingClassForUserId");

                    b.HasIndex(new[] { "CourseScheduleCourseDetailsId" }, "on_going_class_for_user_course_schedule_course_details_id_idx");

                    b.HasIndex(new[] { "UserId" }, "on_going_class_for_user_user_id_idx");

                    b.ToTable("on_going_class_for_user", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<string>("AboutOrganziation")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("about_organziation");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact_number");

                    b.Property<string>("Country")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("country");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<int?>("Creator")
                        .HasColumnType("int")
                        .HasColumnName("creator");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("EndPoint")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("end_point");

                    b.Property<ulong?>("IsActive")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_active");

                    b.Property<ulong?>("IsApproved")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_approved");

                    b.Property<ulong?>("IsDeleted")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_deleted");

                    b.Property<ulong?>("IsRejected")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_rejected");

                    b.Property<string>("Logo")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("reason");

                    b.Property<int?>("RejectedBy")
                        .HasColumnType("int")
                        .HasColumnName("rejected_by");

                    b.Property<int?>("TypeOfOrganization")
                        .HasColumnType("int")
                        .HasColumnName("type_of_organization");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("updated_date");

                    b.HasKey("OrganizationId");

                    b.HasIndex(new[] { "ApprovedBy" }, "approved_by_idx");

                    b.HasIndex(new[] { "Creator" }, "organization_creator_idx");

                    b.HasIndex(new[] { "RejectedBy" }, "rejected_by_idx");

                    b.ToTable("organization", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.OrganizationOwner", b =>
                {
                    b.Property<int>("OrganizationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("organization_user_id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(65)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("middle_name");

                    b.Property<string>("ProfileInfo")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("Profile_info");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OrganizationUserId")
                        .HasName("PRIMARY");

                    b.ToTable("organization_owner", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.OrganizationRequest", b =>
                {
                    b.Property<int>("OrganizationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("organization_request_id");

                    b.Property<string>("About")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("about");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("contact_number");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("country");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<ulong?>("IsEditRequest")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_edit_request");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("Logo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("logo");

                    b.Property<int?>("OrganizationApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("organization_approved_by");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<ulong?>("OrganizationIsApproved")
                        .HasColumnType("bit(1)")
                        .HasColumnName("organization_is_approved");

                    b.Property<ulong?>("OrganizationIsRejected")
                        .HasColumnType("bit(1)")
                        .HasColumnName("organization_is_rejected");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("organization_name");

                    b.Property<int?>("OrganizationRejectedBy")
                        .HasColumnType("int")
                        .HasColumnName("organization_rejected_by");

                    b.Property<int?>("OrganizationType")
                        .HasColumnType("int")
                        .HasColumnName("organization_type");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reason");

                    b.HasKey("OrganizationRequestId");

                    b.HasIndex(new[] { "OrganizationApprovedBy" }, "organization_approved_by_id");

                    b.HasIndex(new[] { "OrganizationRejectedBy" }, "organization_rejected_by_id");

                    b.ToTable("organization_request", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_name");

                    b.HasKey("ParentId");

                    b.ToTable("parent", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.ParentStudent", b =>
                {
                    b.Property<int>("ParentStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Parent_student_id");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("organization_id");

                    b.Property<string>("ParentId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("parent_id");

                    b.Property<string>("RelationType")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("relation_type");

                    b.Property<string>("StudentId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("student_id");

                    b.HasKey("ParentStudentId");

                    b.ToTable("parent_student", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("PermissionId");

                    b.ToTable("permission", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.Privillage", b =>
                {
                    b.Property<int>("PrivillageId")
                        .HasColumnType("int")
                        .HasColumnName("privillage_id");

                    b.Property<string>("Details")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("details");

                    b.Property<string>("IsMandatory")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("is_mandatory");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("organization_id");

                    b.HasKey("PrivillageId");

                    b.ToTable("privillage", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.PrivillagePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .HasColumnType("int")
                        .HasColumnName("role_permission_id");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("organization_id");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("permission_id");

                    b.Property<string>("RoleId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("role_id");

                    b.HasKey("RolePermissionId")
                        .HasName("PRIMARY");

                    b.ToTable("privillage_permission", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("details");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("display_name");

                    b.Property<ulong?>("IsMandatory")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_mandatory");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "CreatedBy" }, "role_created_by_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "role_organization_id_idx");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_permission_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("RolePermissionId");

                    b.HasIndex(new[] { "PermissionId" }, "permission_id_idx");

                    b.HasIndex(new[] { "RoleId" }, "role_id_idx");

                    b.HasIndex(new[] { "CreatedBy" }, "role_permission_created_by_idx");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.SpecificUserPrmission", b =>
                {
                    b.Property<int>("SpecificUserPrmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("specific_user_prmission_id");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<int?>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("content_id");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<ulong?>("IsRequested")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_requested");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<int?>("RequestBy")
                        .HasColumnType("int")
                        .HasColumnName("request_by");

                    b.Property<string>("Token")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("token");

                    b.HasKey("SpecificUserPrmissionId");

                    b.HasIndex(new[] { "ApprovedBy" }, "specific_user_prmission_approved_by_idx");

                    b.HasIndex(new[] { "ContentId" }, "specific_user_prmission_content_id_idx");

                    b.HasIndex(new[] { "RequestBy" }, "specific_user_prmission_request_by_idx");

                    b.ToTable("specific_user_prmission", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<string>("CreatedIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_ip");

                    b.Property<string>("Dob")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("dob");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<ulong?>("HasEmail")
                        .HasColumnType("bit(1)")
                        .HasColumnName("has_email");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("middle_name");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<string>("ModifiedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("modified_date");

                    b.Property<string>("ModifiedId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("modified_id");

                    b.Property<string>("UserId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_name");

                    b.HasKey("StudentId");

                    b.ToTable("student", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_name");

                    b.HasKey("TeacherId");

                    b.ToTable("teacher", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact_number");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<string>("Dob")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("firstname");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("image");

                    b.Property<ulong?>("IsActive")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_Active");

                    b.Property<ulong?>("IsPlatformAdmin")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_platform_admin");

                    b.Property<ulong?>("IsRoot")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_root");

                    b.Property<string>("Lastname")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("lastname");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.HasKey("UserId");

                    b.ToTable("user", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.UserContent", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("content_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<int?>("DuplicatedFrom")
                        .HasColumnType("int")
                        .HasColumnName("duplicated_from");

                    b.Property<ulong>("IsDuplicate")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_duplicate");

                    b.Property<string>("LongDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("long_description");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("short_description");

                    b.Property<string>("UserContentGuid")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("user_content_guid");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ContentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "created_by_idx");

                    b.HasIndex(new[] { "DuplicatedFrom" }, "duplicated_from_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "organization_id_idx");

                    b.HasIndex(new[] { "UserId" }, "user_id_idx");

                    b.ToTable("user_content", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserContentAccessRequest", b =>
                {
                    b.Property<int>("UserContentAccessRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_content_access_request_id");

                    b.Property<ulong?>("Approved")
                        .HasColumnType("bit(1)")
                        .HasColumnName("approved");

                    b.Property<string>("ApprovedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("approved_date");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("content_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("RequestBy")
                        .HasColumnType("int")
                        .HasColumnName("request_by");

                    b.Property<string>("RequestedDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("requested_date");

                    b.HasKey("UserContentAccessRequestId");

                    b.HasIndex(new[] { "ContentId" }, "user_content_access_request_content_id_idx");

                    b.HasIndex(new[] { "RequestBy" }, "user_content_access_request_requested_by_idx");

                    b.ToTable("user_content_access_request", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserContentAttachment", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("attachments_id");

                    b.Property<string>("AttachmentKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("attachment_key");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<int>("UserContentId")
                        .HasColumnType("int")
                        .HasColumnName("user_content_id");

                    b.HasKey("AttachmentsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "attachments_created_by_idx");

                    b.HasIndex(new[] { "UserContentId" }, "user_content_id_idx");

                    b.ToTable("user_content_attachments", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserContentMetum", b =>
                {
                    b.Property<int>("UserContentMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_content_meta_id");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("content_id");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key");

                    b.Property<int?>("MetaType")
                        .HasColumnType("int")
                        .HasColumnName("meta_type");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("UserContentMetaId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContentId" }, "user_content_id_idx")
                        .HasDatabaseName("user_content_id_idx1");

                    b.ToTable("user_content_meta", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserContentQuestion", b =>
                {
                    b.Property<int>("UserContentQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_content_question_id");

                    b.Property<string>("Answers")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("answers");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<ulong?>("IsMultiselect")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_multiselect");

                    b.Property<string>("Question")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("question");

                    b.Property<string>("QuestionDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("question_description");

                    b.Property<int>("UserContentId")
                        .HasColumnType("int")
                        .HasColumnName("user_content_id");

                    b.HasKey("UserContentQuestionId");

                    b.HasIndex(new[] { "CreatedBy" }, "user_content_question_created_by_idx");

                    b.HasIndex(new[] { "UserContentId" }, "user_content_question_user_content_id_idx");

                    b.ToTable("user_content_question", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserContentScratchProject", b =>
                {
                    b.Property<int>("UserContentScratchProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_content_scratch_project_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<string>("Link")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("name");

                    b.Property<int>("UserContentId")
                        .HasColumnType("int")
                        .HasColumnName("user_content_id");

                    b.HasKey("UserContentScratchProjectId");

                    b.HasIndex(new[] { "UserContentId" }, "user_content_scratch_project_content_id_idx");

                    b.HasIndex(new[] { "CreatedBy" }, "user_content_scratch_project_created_by_idx");

                    b.ToTable("user_content_scratch_project", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserContentSharingPermission", b =>
                {
                    b.Property<int>("UserContentSharingPermissionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_content_sharing_permissions_id");

                    b.Property<ulong?>("IsPrivate")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_private");

                    b.Property<int?>("PermissionsUserContentId")
                        .HasColumnType("int")
                        .HasColumnName("permissions_user_content_id");

                    b.Property<ulong?>("ShareAlsoWithStudentsOfAllOgranizations")
                        .HasColumnType("bit(1)")
                        .HasColumnName("share_also_with_students_of_all_ogranizations");

                    b.Property<ulong?>("ShareAlsoWithStudentsOfMyOgranizations")
                        .HasColumnType("bit(1)")
                        .HasColumnName("share_also_with_students_of_my_ogranizations");

                    b.Property<ulong?>("ShareToAllOgranizations")
                        .HasColumnType("bit(1)")
                        .HasColumnName("share_to_all_ogranizations");

                    b.Property<ulong?>("ShareToMyOgranizations")
                        .HasColumnType("bit(1)")
                        .HasColumnName("share_to_my_ogranizations");

                    b.Property<ulong?>("SharedToAll")
                        .HasColumnType("bit(1)")
                        .HasColumnName("shared_to_all");

                    b.Property<ulong?>("SharedWithSpecificPeople")
                        .HasColumnType("bit(1)")
                        .HasColumnName("shared_with_specific_people");

                    b.HasKey("UserContentSharingPermissionsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PermissionsUserContentId" }, "permissions_user_content_id_idx");

                    b.ToTable("user_content_sharing_permissions", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserInvite", b =>
                {
                    b.Property<int>("UserInviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_invite_id");

                    b.Property<ulong?>("Accepted")
                        .HasColumnType("bit(1)")
                        .HasColumnName("accepted");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<ulong?>("IsInvitationSent")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_invitation_sent");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<int?>("RegisteredUserId")
                        .HasColumnType("int")
                        .HasColumnName("registered_user_id");

                    b.Property<ulong?>("Rejected")
                        .HasColumnType("bit(1)")
                        .HasColumnName("rejected");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserInviteId");

                    b.HasIndex(new[] { "CreatedBy" }, "user_invite_created_by_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "user_invite_organization_id_idx");

                    b.HasIndex(new[] { "RegisteredUserId" }, "user_invite_registered_user_id_idx");

                    b.HasIndex(new[] { "RoleId" }, "user_invite_role_id_idx");

                    b.ToTable("user_invite", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.UserOrganization", b =>
                {
                    b.Property<int>("UserOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_organization_id");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<int?>("CretaedBy")
                        .HasColumnType("int")
                        .HasColumnName("cretaed_by");

                    b.Property<ulong?>("IsActive")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_active");

                    b.Property<ulong?>("IsLinked")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_linked");

                    b.Property<ulong?>("IsSelected")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_selected");

                    b.Property<int?>("LinkedUserOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("linked_user_organization_id");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserOrganizationId");

                    b.HasIndex(new[] { "CretaedBy" }, "user_organization_created_by_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "user_organization_organization_id_idx");

                    b.HasIndex(new[] { "UserId" }, "user_organization_user_id_idx");

                    b.ToTable("user_organization", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.UserOrganizationEmail", b =>
                {
                    b.Property<int>("UserOrganizationEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_organization_email_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<ulong>("IsNotificationOn")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_notification_on");

                    b.Property<ulong>("IsPrimary")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_primary");

                    b.Property<ulong>("IsVerified")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_verified");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<int?>("Pin")
                        .HasColumnType("int")
                        .HasColumnName("pin");

                    b.Property<string>("PinGeneratedAt")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("pin_generated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserOrganizationEmailId");

                    b.HasIndex(new[] { "OrganizationId" }, "user_organization_email_organization_id_idx");

                    b.HasIndex(new[] { "UserId" }, "user_organization_email_user_id_idx");

                    b.ToTable("user_organization_emails", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserOrganizationRole", b =>
                {
                    b.Property<int>("UserOrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_organization_role_id");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("user_organization_id");

                    b.HasKey("UserOrganizationRoleId");

                    b.HasIndex(new[] { "RoleId" }, "role_id_idx")
                        .HasDatabaseName("role_id_idx1");

                    b.HasIndex(new[] { "UserOrganizationId" }, "user_organization_id_idx");

                    b.HasIndex(new[] { "CreatedBy" }, "user_organization_role_created_by_idx");

                    b.ToTable("user_organization_role", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UserPrivillage", b =>
                {
                    b.Property<int>("UserPrivillageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_privillage_id");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("organization_id");

                    b.Property<string>("PrivillageId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("privillage_id");

                    b.Property<string>("UserId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_id");

                    b.HasKey("UserPrivillageId");

                    b.ToTable("user_privillage", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.UserRegistration", b =>
                {
                    b.Property<int>("UserRegistrationId")
                        .HasColumnType("int")
                        .HasColumnName("user_registration_id");

                    b.Property<string>("City")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("city");

                    b.Property<string>("ConvertedId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("converted_id");

                    b.Property<string>("Country")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("country");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("IsApproved")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("is_approved");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Province")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("province");

                    b.Property<string>("UserType")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_type");

                    b.HasKey("UserRegistrationId");

                    b.ToTable("user_registration", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("DbRepository.Models.UserRequest", b =>
                {
                    b.Property<int>("UserRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_request_id");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact_number");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_date");

                    b.Property<string>("Dob")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<ulong?>("IsApproved")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_approved");

                    b.Property<ulong?>("IsRejected")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_rejected");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reason");

                    b.Property<int?>("RejectedBy")
                        .HasColumnType("int")
                        .HasColumnName("rejected_by");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserRequestId");

                    b.HasIndex(new[] { "ApprovedBy" }, "user_request_approved_by_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "user_request_organization_id_idx");

                    b.HasIndex(new[] { "RejectedBy" }, "user_request_rejected_by_idx");

                    b.HasIndex(new[] { "RoleId" }, "user_request_role_id_idx");

                    b.HasIndex(new[] { "UserId" }, "user_request_user_id_idx");

                    b.ToTable("user_request", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UsernameLoginStudent", b =>
                {
                    b.Property<int>("UsernameLoginStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("username_login_student_id");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_date");

                    b.Property<string>("Dob")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dob");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("image");

                    b.Property<ulong?>("IsDeleted")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_deleted");

                    b.Property<ulong?>("IsParent")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_parent");

                    b.Property<ulong?>("IsShareInfo")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_share_info");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<int>("LinkParentId")
                        .HasColumnType("int")
                        .HasColumnName("link_parent_id");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("UsernameLoginStudentId");

                    b.HasIndex(new[] { "CreatedBy" }, "username_login_student_created_by_idx");

                    b.HasIndex(new[] { "LinkParentId" }, "username_login_student_link_parent_id_idx");

                    b.HasIndex(new[] { "UserId" }, "username_login_student_user_id_idx");

                    b.ToTable("username_login_student", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.UsernameLoginStudentOrganization", b =>
                {
                    b.Property<int>("UsernameLoginStudentOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("username_login_student_organization_id");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<int>("UsernameLoginStudentId")
                        .HasColumnType("int")
                        .HasColumnName("username_login_student_id");

                    b.HasKey("UsernameLoginStudentOrganizationId");

                    b.HasIndex(new[] { "UsernameLoginStudentId" }, "username_login_student_id_idx");

                    b.HasIndex(new[] { "OrganizationId" }, "username_login_student_organization_organization_id_idx");

                    b.ToTable("username_login_student_organization", (string)null);
                });

            modelBuilder.Entity("DbRepository.Models.ContactU", b =>
                {
                    b.HasOne("DbRepository.Models.Organization", "ContactUsOrganization")
                        .WithMany("ContactUs")
                        .HasForeignKey("ContactUsOrganizationId")
                        .HasConstraintName("contact_us_organization_id");

                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("ContactUs")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("contact_us_created_by");

                    b.Navigation("ContactUsOrganization");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("DbRepository.Models.Course", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("course_created_by");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("Courses")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("course_organization_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DbRepository.Models.CourseLesson", b =>
                {
                    b.HasOne("DbRepository.Models.Course", "Course")
                        .WithMany("CourseLessons")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("course_lesson_course_id");

                    b.HasOne("DbRepository.Models.UserContent", "UserContent")
                        .WithMany("CourseLessons")
                        .HasForeignKey("UserContentId")
                        .IsRequired()
                        .HasConstraintName("course_lesson_user_content_id");

                    b.Navigation("Course");

                    b.Navigation("UserContent");
                });

            modelBuilder.Entity("DbRepository.Models.CourseLocation", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("CourseLocations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("course_location_created_by");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("CourseLocations")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("course_location_organization_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DbRepository.Models.CourseSchedule", b =>
                {
                    b.HasOne("DbRepository.Models.Course", "Course")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("course_schedule_course_id");

                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("course_schedule_created_by");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("course_schedule_organization_id");

                    b.Navigation("Course");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DbRepository.Models.CourseScheduleAttendance", b =>
                {
                    b.HasOne("DbRepository.Models.CourseScheduleCourseDetail", "CourseScheduleCourseDetails")
                        .WithMany("CourseScheduleAttendances")
                        .HasForeignKey("CourseScheduleCourseDetailsId")
                        .IsRequired()
                        .HasConstraintName("course_schedule_course_details_id");

                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("CourseScheduleAttendanceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("course_schedule_attendance_created_by");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("CourseScheduleAttendanceUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("course_schedule_attendance_user_id");

                    b.Navigation("CourseScheduleCourseDetails");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.CourseScheduleCourseDetail", b =>
                {
                    b.HasOne("DbRepository.Models.CourseSchedule", "CourseSchedule")
                        .WithMany("CourseScheduleCourseDetails")
                        .HasForeignKey("CourseScheduleId")
                        .IsRequired()
                        .HasConstraintName("course_schedule_course_details_course_schedule_id");

                    b.HasOne("DbRepository.Models.CourseLocation", "Location")
                        .WithMany("CourseScheduleCourseDetails")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("course_schedule_course_details_location_id");

                    b.HasOne("DbRepository.Models.User", "Teacher")
                        .WithMany("CourseScheduleCourseDetails")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("course_schedule_course_details_teacher_id");

                    b.HasOne("DbRepository.Models.UserContent", "UserContent")
                        .WithMany("CourseScheduleCourseDetails")
                        .HasForeignKey("UserContentId")
                        .IsRequired()
                        .HasConstraintName("course_schedule_course_details_user_content_id");

                    b.Navigation("CourseSchedule");

                    b.Navigation("Location");

                    b.Navigation("Teacher");

                    b.Navigation("UserContent");
                });

            modelBuilder.Entity("DbRepository.Models.CourseScheduleMember", b =>
                {
                    b.HasOne("DbRepository.Models.CourseScheduleCourseDetail", "CourseScheduleCourseDetailsNavigation")
                        .WithMany("CourseScheduleMembers")
                        .HasForeignKey("CourseScheduleCourseDetails")
                        .IsRequired()
                        .HasConstraintName("course_schedule_details");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("CourseScheduleMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("course_schedule_member_user_id");

                    b.Navigation("CourseScheduleCourseDetailsNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.OnGoingClassForUser", b =>
                {
                    b.HasOne("DbRepository.Models.CourseScheduleCourseDetail", "CourseScheduleCourseDetails")
                        .WithMany("OnGoingClassForUsers")
                        .HasForeignKey("CourseScheduleCourseDetailsId")
                        .IsRequired()
                        .HasConstraintName("on_going_class_for_user_course_schedule_course_details_id");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("OnGoingClassForUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("on_going_class_for_user_user_id");

                    b.Navigation("CourseScheduleCourseDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.Organization", b =>
                {
                    b.HasOne("DbRepository.Models.User", "ApprovedByNavigation")
                        .WithMany("OrganizationApprovedByNavigations")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("approved_by");

                    b.HasOne("DbRepository.Models.User", "CreatorNavigation")
                        .WithMany("OrganizationCreatorNavigations")
                        .HasForeignKey("Creator")
                        .HasConstraintName("creator");

                    b.HasOne("DbRepository.Models.User", "RejectedByNavigation")
                        .WithMany("OrganizationRejectedByNavigations")
                        .HasForeignKey("RejectedBy")
                        .HasConstraintName("rejected_by");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("CreatorNavigation");

                    b.Navigation("RejectedByNavigation");
                });

            modelBuilder.Entity("DbRepository.Models.OrganizationRequest", b =>
                {
                    b.HasOne("DbRepository.Models.User", "OrganizationApprovedByNavigation")
                        .WithMany("OrganizationRequestOrganizationApprovedByNavigations")
                        .HasForeignKey("OrganizationApprovedBy")
                        .HasConstraintName("organization_approved_by");

                    b.HasOne("DbRepository.Models.User", "OrganizationRejectedByNavigation")
                        .WithMany("OrganizationRequestOrganizationRejectedByNavigations")
                        .HasForeignKey("OrganizationRejectedBy")
                        .HasConstraintName("organization_rejected_by");

                    b.Navigation("OrganizationApprovedByNavigation");

                    b.Navigation("OrganizationRejectedByNavigation");
                });

            modelBuilder.Entity("DbRepository.Models.Role", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("Roles")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("role_created_by");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("role_organization_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DbRepository.Models.RolePermission", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("RolePermissions")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("role_permission_created_by");

                    b.HasOne("DbRepository.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("permission_id");

                    b.HasOne("DbRepository.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("role_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DbRepository.Models.SpecificUserPrmission", b =>
                {
                    b.HasOne("DbRepository.Models.User", "ApprovedByNavigation")
                        .WithMany("SpecificUserPrmissionApprovedByNavigations")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("specific_user_prmission_approved_by");

                    b.HasOne("DbRepository.Models.UserContent", "Content")
                        .WithMany("SpecificUserPrmissions")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("specific_user_prmission_content_id");

                    b.HasOne("DbRepository.Models.User", "RequestByNavigation")
                        .WithMany("SpecificUserPrmissionRequestByNavigations")
                        .HasForeignKey("RequestBy")
                        .HasConstraintName("specific_user_prmission_request_by");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Content");

                    b.Navigation("RequestByNavigation");
                });

            modelBuilder.Entity("DbRepository.Models.UserContent", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("UserContentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("created_by");

                    b.HasOne("DbRepository.Models.UserContent", "DuplicatedFromNavigation")
                        .WithMany("InverseDuplicatedFromNavigation")
                        .HasForeignKey("DuplicatedFrom")
                        .HasConstraintName("duplicated_from");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("UserContents")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("organization_id");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("UserContentUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DuplicatedFromNavigation");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.UserContentAccessRequest", b =>
                {
                    b.HasOne("DbRepository.Models.UserContent", "Content")
                        .WithMany("UserContentAccessRequests")
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("user_content_access_request_content_id");

                    b.HasOne("DbRepository.Models.User", "RequestByNavigation")
                        .WithMany("UserContentAccessRequests")
                        .HasForeignKey("RequestBy")
                        .HasConstraintName("user_content_access_request_requested_by");

                    b.Navigation("Content");

                    b.Navigation("RequestByNavigation");
                });

            modelBuilder.Entity("DbRepository.Models.UserContentAttachment", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("UserContentAttachments")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("attachments_created_by");

                    b.HasOne("DbRepository.Models.UserContent", "UserContent")
                        .WithMany("UserContentAttachments")
                        .HasForeignKey("UserContentId")
                        .IsRequired()
                        .HasConstraintName("attachments_user_content_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UserContent");
                });

            modelBuilder.Entity("DbRepository.Models.UserContentMetum", b =>
                {
                    b.HasOne("DbRepository.Models.UserContent", "Content")
                        .WithMany("UserContentMeta")
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("user_content_id");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("DbRepository.Models.UserContentQuestion", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("UserContentQuestions")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("user_content_question_created_by");

                    b.HasOne("DbRepository.Models.UserContent", "UserContent")
                        .WithMany("UserContentQuestions")
                        .HasForeignKey("UserContentId")
                        .IsRequired()
                        .HasConstraintName("user_content_question_user_content_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UserContent");
                });

            modelBuilder.Entity("DbRepository.Models.UserContentScratchProject", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("UserContentScratchProjects")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("user_content_scratch_project_created_by");

                    b.HasOne("DbRepository.Models.UserContent", "UserContent")
                        .WithMany("UserContentScratchProjects")
                        .HasForeignKey("UserContentId")
                        .IsRequired()
                        .HasConstraintName("user_content_scratch_project_content_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UserContent");
                });

            modelBuilder.Entity("DbRepository.Models.UserContentSharingPermission", b =>
                {
                    b.HasOne("DbRepository.Models.UserContent", "PermissionsUserContent")
                        .WithMany("UserContentSharingPermissions")
                        .HasForeignKey("PermissionsUserContentId")
                        .HasConstraintName("permissions_user_content_id");

                    b.Navigation("PermissionsUserContent");
                });

            modelBuilder.Entity("DbRepository.Models.UserInvite", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("UserInviteCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("user_invite_created_by");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("UserInvites")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("user_invite_organization_id");

                    b.HasOne("DbRepository.Models.User", "RegisteredUser")
                        .WithMany("UserInviteRegisteredUsers")
                        .HasForeignKey("RegisteredUserId")
                        .HasConstraintName("user_invite_registered_user_id");

                    b.HasOne("DbRepository.Models.Role", "Role")
                        .WithMany("UserInvites")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("user_invite_role_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("RegisteredUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DbRepository.Models.UserOrganization", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CretaedByNavigation")
                        .WithMany("UserOrganizationCretaedByNavigations")
                        .HasForeignKey("CretaedBy")
                        .HasConstraintName("user_organization_created_by");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("user_organization_organization_id");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("UserOrganizationUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_organization_user_id");

                    b.Navigation("CretaedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.UserOrganizationEmail", b =>
                {
                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("UserOrganizationEmails")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("user_organization_email_organization_id");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("UserOrganizationEmails")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_organization_email_user_id");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.UserOrganizationRole", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("user_organization_role_created_by");

                    b.HasOne("DbRepository.Models.Role", "Role")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("user_oganization_role_id");

                    b.HasOne("DbRepository.Models.UserOrganization", "UserOrganization")
                        .WithMany("UserOrganizationRoles")
                        .HasForeignKey("UserOrganizationId")
                        .IsRequired()
                        .HasConstraintName("user_organization_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("UserOrganization");
                });

            modelBuilder.Entity("DbRepository.Models.UserRequest", b =>
                {
                    b.HasOne("DbRepository.Models.User", "ApprovedByNavigation")
                        .WithMany("UserRequestApprovedByNavigations")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("user_request_approved_by");

                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("UserRequests")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("user_request_organization_id");

                    b.HasOne("DbRepository.Models.User", "RejectedByNavigation")
                        .WithMany("UserRequestRejectedByNavigations")
                        .HasForeignKey("RejectedBy")
                        .HasConstraintName("user_request_rejected_by");

                    b.HasOne("DbRepository.Models.Role", "Role")
                        .WithMany("UserRequests")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("user_request_role_id");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("UserRequestUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_request_user_id");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Organization");

                    b.Navigation("RejectedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.UsernameLoginStudent", b =>
                {
                    b.HasOne("DbRepository.Models.User", "CreatedByNavigation")
                        .WithMany("UsernameLoginStudentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("username_login_student_created_by");

                    b.HasOne("DbRepository.Models.User", "LinkParent")
                        .WithMany("UsernameLoginStudentLinkParents")
                        .HasForeignKey("LinkParentId")
                        .IsRequired()
                        .HasConstraintName("username_login_student_link_parent_id");

                    b.HasOne("DbRepository.Models.User", "User")
                        .WithMany("UsernameLoginStudentUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("username_login_student_user_id");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("LinkParent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbRepository.Models.UsernameLoginStudentOrganization", b =>
                {
                    b.HasOne("DbRepository.Models.Organization", "Organization")
                        .WithMany("UsernameLoginStudentOrganizations")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("username_login_student_organization_organization_id");

                    b.HasOne("DbRepository.Models.UsernameLoginStudent", "UsernameLoginStudent")
                        .WithMany("UsernameLoginStudentOrganizations")
                        .HasForeignKey("UsernameLoginStudentId")
                        .IsRequired()
                        .HasConstraintName("username_login_student_id");

                    b.Navigation("Organization");

                    b.Navigation("UsernameLoginStudent");
                });

            modelBuilder.Entity("DbRepository.Models.Course", b =>
                {
                    b.Navigation("CourseLessons");

                    b.Navigation("CourseSchedules");
                });

            modelBuilder.Entity("DbRepository.Models.CourseLocation", b =>
                {
                    b.Navigation("CourseScheduleCourseDetails");
                });

            modelBuilder.Entity("DbRepository.Models.CourseSchedule", b =>
                {
                    b.Navigation("CourseScheduleCourseDetails");
                });

            modelBuilder.Entity("DbRepository.Models.CourseScheduleCourseDetail", b =>
                {
                    b.Navigation("CourseScheduleAttendances");

                    b.Navigation("CourseScheduleMembers");

                    b.Navigation("OnGoingClassForUsers");
                });

            modelBuilder.Entity("DbRepository.Models.Organization", b =>
                {
                    b.Navigation("ContactUs");

                    b.Navigation("CourseLocations");

                    b.Navigation("CourseSchedules");

                    b.Navigation("Courses");

                    b.Navigation("Roles");

                    b.Navigation("UserContents");

                    b.Navigation("UserInvites");

                    b.Navigation("UserOrganizationEmails");

                    b.Navigation("UserOrganizations");

                    b.Navigation("UserRequests");

                    b.Navigation("UsernameLoginStudentOrganizations");
                });

            modelBuilder.Entity("DbRepository.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DbRepository.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserInvites");

                    b.Navigation("UserOrganizationRoles");

                    b.Navigation("UserRequests");
                });

            modelBuilder.Entity("DbRepository.Models.User", b =>
                {
                    b.Navigation("ContactUs");

                    b.Navigation("CourseLocations");

                    b.Navigation("CourseScheduleAttendanceCreatedByNavigations");

                    b.Navigation("CourseScheduleAttendanceUsers");

                    b.Navigation("CourseScheduleCourseDetails");

                    b.Navigation("CourseScheduleMembers");

                    b.Navigation("CourseSchedules");

                    b.Navigation("Courses");

                    b.Navigation("OnGoingClassForUsers");

                    b.Navigation("OrganizationApprovedByNavigations");

                    b.Navigation("OrganizationCreatorNavigations");

                    b.Navigation("OrganizationRejectedByNavigations");

                    b.Navigation("OrganizationRequestOrganizationApprovedByNavigations");

                    b.Navigation("OrganizationRequestOrganizationRejectedByNavigations");

                    b.Navigation("RolePermissions");

                    b.Navigation("Roles");

                    b.Navigation("SpecificUserPrmissionApprovedByNavigations");

                    b.Navigation("SpecificUserPrmissionRequestByNavigations");

                    b.Navigation("UserContentAccessRequests");

                    b.Navigation("UserContentAttachments");

                    b.Navigation("UserContentCreatedByNavigations");

                    b.Navigation("UserContentQuestions");

                    b.Navigation("UserContentScratchProjects");

                    b.Navigation("UserContentUsers");

                    b.Navigation("UserInviteCreatedByNavigations");

                    b.Navigation("UserInviteRegisteredUsers");

                    b.Navigation("UserOrganizationCretaedByNavigations");

                    b.Navigation("UserOrganizationEmails");

                    b.Navigation("UserOrganizationRoles");

                    b.Navigation("UserOrganizationUsers");

                    b.Navigation("UserRequestApprovedByNavigations");

                    b.Navigation("UserRequestRejectedByNavigations");

                    b.Navigation("UserRequestUsers");

                    b.Navigation("UsernameLoginStudentCreatedByNavigations");

                    b.Navigation("UsernameLoginStudentLinkParents");

                    b.Navigation("UsernameLoginStudentUsers");
                });

            modelBuilder.Entity("DbRepository.Models.UserContent", b =>
                {
                    b.Navigation("CourseLessons");

                    b.Navigation("CourseScheduleCourseDetails");

                    b.Navigation("InverseDuplicatedFromNavigation");

                    b.Navigation("SpecificUserPrmissions");

                    b.Navigation("UserContentAccessRequests");

                    b.Navigation("UserContentAttachments");

                    b.Navigation("UserContentMeta");

                    b.Navigation("UserContentQuestions");

                    b.Navigation("UserContentScratchProjects");

                    b.Navigation("UserContentSharingPermissions");
                });

            modelBuilder.Entity("DbRepository.Models.UserOrganization", b =>
                {
                    b.Navigation("UserOrganizationRoles");
                });

            modelBuilder.Entity("DbRepository.Models.UsernameLoginStudent", b =>
                {
                    b.Navigation("UsernameLoginStudentOrganizations");
                });
#pragma warning restore 612, 618
        }
    }
}
